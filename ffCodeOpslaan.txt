void Job::checkIfTaskIsFinished(unsigned short aCurrentTime) {
}

int Job::getDurationOfBusyTask() {
}

unsigned short Job::compareSlackWithOtherJobWithSameMachine(
		unsigned short aMachine) {
}

unsigned short Job::getSlackOfFirstJobToRun(){
	for(unsigned long i = 0; i < taskList.size(); i+=2){
		if(taskList.at(i).getStatus() == 0){
			return taskList.at(i).getSlack();
		}
	}
	return -1;
}

unsigned short Job::checkSlackOfFirstJobToRun(unsigned short aMachine){
	for(unsigned long i = 0; i < taskList.size(); i+=2){
		if(taskList.at(i).getStatus() == 0){
			if(taskList.at(i).getMachine() == aMachine){
//				std::cout << "Taak : " << i << " has a slack of = " << taskList.at(i).getSlack() << std::endl;
			return taskList.at(i).getSlack();
		}
			return -1;
		}
	}
	return -1;
}

unsigned short Job::calculateTotalTime() {
	unsigned short totalTime = currentTime;
//	std::cout << "totalTime = " << totalTime << std::endl;
		for (long unsigned i = 0; i < taskList.size(); ++i){
			if(taskList.at(i).getStatus() == 0){
			totalTime += taskList.at(i).getDuration();
//			std::cout << "totalTime = " << totalTime << std::endl;
		}
		}

//		std::cout << "currentTime calculate function = " << currentTime << std::endl;
		return totalTime;
}

void Job::addTask(unsigned short aMachine, unsigned short aDuration) {
taskList.push_back(Task(aMachine, aDuration));
}

void Job::setCurrentTime(unsigned short currentTime) {
	this->currentTime = currentTime;
}

unsigned short Job::getStatus() const {
	return status;
}

void Job::setStatus(unsigned short status) {
	this->status = status;
}

const std::vector<Task>& Job::getTaskList() const {
	return taskList;
}

void Job::generateStartAndEndTime(unsigned short aCriticalPath) {
	unsigned short start = currentTime;
	for (long unsigned  i = 0; i < taskList.size(); i++){
		if(taskList.at(i).getStatus()==0){
		taskList.at(i).setStartTime(start);
		start += taskList.at(i).getDuration();
//		std::cout << "De start tijd van taak " << i << " = "<< taskList.at(i).getStartTime() << std::endl;
	}
}

//	std::cout << "Het kritieke pad is " << aCriticalPath << std::endl;

	unsigned short eind = aCriticalPath;
	for (long unsigned  i = taskList.size(); i > 0; --i){
		if(taskList.at(i-1).getStatus()==0){
		taskList.at(i-1).setEndTime(eind - taskList.at(i-1).getDuration());
		eind -= taskList.at(i-1).getDuration();
//		std::cout << "De eind tijd van taak " << i << " = "<< taskList.at(i-1).getEndTime() << std::endl;
	}
}
}

int Job::getFirstMachineToRun() {
	for(unsigned long i = 0; i < taskList.size(); i+=2){
		if(taskList.at(i).getStatus() == 0){
//			std::cout << "Taak : " << i << " has machine " << taskList.at(i).getMachine() << std::endl;
			return taskList.at(i).getMachine();
		}
	}
	return -1;
}

int Job::getBusyMachine(){
	for(unsigned long i = 0; i < taskList.size(); i+=2){
		if(taskList.at(i).getStatus() == 1){
			return taskList.at(i).getMachine();
		}
	}
	return -1;
}

int Job::getBusyDuration(){
	for(unsigned long i = 0; i < taskList.size(); i+=2){
		if(taskList.at(i).getStatus() == 1){
//			std::cout << "Taak : " << i << " has a duration of = " << taskList.at(i).getDuration() << std::endl;
			return taskList.at(i).getDuration();
		}
	}
	return -1;
}

void Job::setFirstFreeTaskToBusy(unsigned short aCurrentTime) {
	for(unsigned long i = 0; i < taskList.size(); i++){
		if(taskList.at(i).getStatus() == 0){
//			std::cout << "Taak to busy " << i << std::endl;
			taskList.at(i).setStatus(1);
			taskList.at(i).setStartTime(aCurrentTime);
			status = 1;
//			std::cout << "Taak : " << i << " has a started" << std::endl;
			break;
		}
	}
}

void Job::checkIfTaskTimeIsDone(unsigned short aCurrentTime)
{
	for(unsigned long i = 0; i < taskList.size(); i++){
		if(taskList.at(i).getStatus() == 1){
			if(taskList.at(i).getStartTime() + taskList.at(i).getDuration() == aCurrentTime){
				std::cout << "Taak is afgerond met de volgende tijden : " << taskList.at(i).getMachine() << taskList.at(i).getStartTime() + taskList.at(i).getDuration() << " en de huidige tijd nu is : " << aCurrentTime << std::endl;
				taskList.at(i).setStatus(2);
				status = 0;
				break;
			}
		}
	}
}

void Job::geefAlleWaardes(){
	for(unsigned long i = 0; i < taskList.size(); i++){
		std::cout<< taskList.at(i).getMachine() << " " << taskList.at(i).getDuration() << std::endl;
	}
}

